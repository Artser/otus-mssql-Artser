/*
Домашнее задание по курсу MS SQL Server Developer в OTUS.

Занятие "06 - Оконные функции".

Задания выполняются с использованием базы данных WideWorldImporters.

Бэкап БД можно скачать отсюда:
https://github.com/Microsoft/sql-server-samples/releases/tag/wide-world-importers-v1.0
Нужен WideWorldImporters-Full.bak

Описание WideWorldImporters от Microsoft:
* https://docs.microsoft.com/ru-ru/sql/samples/wide-world-importers-what-is
* https://docs.microsoft.com/ru-ru/sql/samples/wide-world-importers-oltp-database-catalog
*/

-- ---------------------------------------------------------------------------
-- Задание - написать выборки для получения указанных ниже данных.
-- ---------------------------------------------------------------------------

USE WideWorldImporters
/*
1. Сделать расчет суммы продаж нарастающим итогом по месяцам с 2015 года 
(в рамках одного месяца он будет одинаковый, нарастать будет в течение времени выборки).
Выведите: id продажи, название клиента, дату продажи, сумму продажи, сумму нарастающим итогом

Пример:
-------------+----------------------------
Дата продажи | Нарастающий итог по месяцу
-------------+----------------------------
 2015-01-29   | 4801725.31
 2015-01-30	 | 4801725.31
 2015-01-31	 | 4801725.31
 2015-02-01	 | 9626342.98
 2015-02-02	 | 9626342.98
 2015-02-03	 | 9626342.98
Продажи можно взять из таблицы Invoices.
Нарастающий итог должен быть без оконной функции.
*/

--Почему здесь маленькие результаты? Что не так?
SELECT CustomerTransactionID, sc.CustomerName, si.InvoiceDate, sct.TransactionAmount,
(select SUM(sct1.TransactionAmount)
FROM [Sales].[Invoices] s1
JOIN [Sales].[Customers] sc1 ON s1.CustomerID = sc1.CustomerID
JOIN [Sales].[CustomerTransactions] as sct1 ON s1.InvoiceID = sct1.InvoiceID
WHERE YEAR(si.InvoiceDate) = YEAR(s1.InvoiceDate) AND MONTH(si.InvoiceDate) >= MONTH(s1.InvoiceDate)
AND sc1.CustomerName = sc.CustomerName
) as Cumulative
FROM [Sales].[Invoices] si
JOIN [Sales].[Customers] sc ON si.CustomerID = sc.CustomerID
JOIN [Sales].[CustomerTransactions] as sct ON si.InvoiceID = sct.InvoiceID
WHERE si.InvoiceDate >='2015-01-01'
GROUP BY si.InvoiceDate, sc.CustomerName,CustomerTransactionID, sct.TransactionAmount
ORDER BY CustomerName,InvoiceDate


--Переписала запрос по другому
SELECT si.InvoiceID,si.InvoiceDate, sc.CustomerName, SUM(sil.Quantity*sil.UnitPrice) as TotalAmount,
(SELECT SUM(sil2.Quantity*sil2.UnitPrice) FROM [Sales].[Invoices] si2
INNER JOIN [Sales].[InvoiceLines] sil2 ON sil2.InvoiceID = si2.InvoiceID
WHERE si2.InvoiceDate BETWEEN '2015-01-01' AND EOMONTH (si.InvoiceDate)) as Cumulative
FROM [Sales].[Invoices] si
INNER JOIN [Sales].[InvoiceLines] sil ON sil.InvoiceID = si.InvoiceID
INNER JOIN [Sales].[Customers] sc ON sc.CustomerID = si.CustomerID
WHERE si.InvoiceDate >= '2015-01-01'
GROUP BY si.InvoiceID, sc.CustomerName, si.InvoiceDate
ORDER BY si.InvoiceDate


Время работы SQL Server:
   Время ЦП = 19687 мс, затраченное время = 20279 мс.
/*
2. Сделайте расчет суммы нарастающим итогом в предыдущем запросе с помощью оконной функции.
   Сравните производительность запросов 1 и 2 с помощью set statistics time, io on
*/
set statistics time,io on

--вроде SUM есть но результат маленький
SELECT CustomerTransactionID, sc.CustomerName, InvoiceDate, sct.TransactionAmount,
SUM (sct.TransactionAmount) OVER (PARTITION by si.CustomerID ORDER BY YEAR(si.InvoiceDate), MONTH(si.InvoiceDate)) as Cumulative
FROM [Sales].[Invoices] si
JOIN [Sales].[Customers] sc ON si.CustomerID = sc.CustomerID
JOIN [Sales].[CustomerTransactions] as sct ON si.InvoiceID = sct.InvoiceID
WHERE si.InvoiceDate >='2015-01-01'
ORDER BY CustomerName,InvoiceDate

--переписала с умножением и оконной функцией


SELECT si.InvoiceID,si.InvoiceDate, sc.CustomerName,
SUM (sil.Quantity*sil.UnitPrice) OVER (ORDER BY EOMONTH (si.InvoiceDate)) as Cumulative
FROM [Sales].[Invoices] si
INNER JOIN [Sales].[InvoiceLines] sil ON sil.InvoiceID = si.InvoiceID
INNER JOIN [Sales].[Customers] sc ON sc.CustomerID = si.CustomerID
WHERE si.InvoiceDate >= '2015-01-01'
ORDER BY si.InvoiceDate

 Время работы SQL Server:
   Время ЦП = 406 мс, затраченное время = 709 мс.
/*
3. Вывести список 2х самых популярных продуктов (по количеству проданных) 
в каждом месяце за 2016 год (по 2 самых популярных продукта в каждом месяце).
*/

SELECT * FROM
(SELECT YEAR(si.InvoiceDate) as year, MONTH(si.InvoiceDate) as month, sil.Description,
SUM(Quantity) as TotalCount, -- всег продано по товарам
ROW_NUMBER () OVER (PARTITION BY YEAR(si.InvoiceDate), MONTH(si.InvoiceDate) ORDER BY SUM(Quantity) DESC) as rank -- нумеруем в порядке убывания количества
FROM [Sales].[Invoices] si
LEFT JOIN [Sales].[InvoiceLines] sil ON sil.InvoiceID = si.InvoiceID
WHERE si.InvoiceDate >= '2016-01-01'
GROUP BY YEAR(si.InvoiceDate), MONTH(si.InvoiceDate), sil.Description
) tb
WHERE rank in(1,2)
ORDER BY tb.year,tb.month

/*
4. Функции одним запросом
Посчитайте по таблице товаров (в вывод также должен попасть ид товара, название, брэнд и цена):
1 пронумеруйте записи по названию товара, так чтобы при изменении буквы алфавита нумерация начиналась заново
2 посчитайте общее количество товаров и выведете полем в этом же запросе
3 посчитайте общее количество товаров в зависимости от первой буквы названия товара
4 отобразите следующий id товара исходя из того, что порядок отображения товаров по имени 
5 предыдущий ид товара с тем же порядком отображения (по имени)
6 названия товара 2 строки назад, в случае если предыдущей строки нет нужно вывести "No items"
7 сформируйте 30 групп товаров по полю вес товара на 1 шт

Для этой задачи НЕ нужно писать аналог без аналитических функций.
*/

SELECT St.StockItemID, St.Brand, St.StockItemName, St.UnitPrice,
ROW_NUMBER () OVER (PARTITION BY LEFT(St.StockItemName,1) ORDER BY St.StockItemName) --1 пронумеруйте записи по названию товара, так чтобы при изменении буквы алфавита нумерация начиналась заново
,COUNT(*) OVER () as TotalCount --2 посчитайте общее количество товаров и выведете полем в этом же запросе
,COUNT (*) OVER (PARTITION BY LEFT(St.StockItemName,1)) as TotalFirst --3 посчитайте общее количество товаров в зависимости от первой буквы названия товара
,LEAD (St.StockItemID) OVER (ORDER BY St.StockItemName) as leadname --4 отобразите следующий id товара исходя из того, что порядок отображения товаров по имени 
,LAG(St.StockItemName)  OVER (ORDER BY St.StockItemName) as lagname --5 предыдущий ид товара с тем же порядком отображения (по имени)
,LAG(St.StockItemName,2,'No items')OVER (ORDER BY St.StockItemName) as lagname2 --6 названия товара 2 строки назад, в случае если предыдущей строки нет нужно вывести "No items"
,NTILE(30) OVER (ORDER BY TypicalWeightPerUnit) as gr --7 сформируйте 30 групп товаров по полю вес товара на 1 шт
 FROM (
SELECT
StockItemID
,Brand
,StockItemName
,UnitPrice
,TypicalWeightPerUnit
FROM Warehouse.StockItems
) as St
ORDER BY 3 -- отсортировала по имени товара для 4 и 5 пункта


/*
5. По каждому сотруднику выведите последнего клиента, которому сотрудник что-то продал.
   В результатах должны быть ид и фамилия сотрудника, ид и название клиента, дата продажи, сумму сделки.
*/
SELECT * FROM
(SELECT p.PersonID, p.FullName, sc.CustomerID,sc.CustomerName, o.OrderDate, 
SUM(sol.Quantity*sol.UnitPrice) as TotalAmount,
ROW_NUMBER () OVER (PARTITION BY p.PersonID ORDER BY FullName, OrderDate DESC, sc.CustomerName) as sort
FROM [Application].[People] p 
INNER JOIN [Sales].[Orders] o ON o.SalespersonPersonID = p.PersonID
INNER JOIN [Sales].[Customers] sc ON sc.CustomerID = o.CustomerID
INNER JOIN [Sales].[OrderLines] sol ON sol.OrderID = o.OrderID
GROUP BY p.PersonID, p.FullName, sc.CustomerID,sc.CustomerName, o.OrderDate
) t
WHERE sort = 1


/*
6. Выберите по каждому клиенту два самых дорогих товара, которые он покупал.
В результатах должно быть ид клиета, его название, ид товара, цена, дата покупки.
*/

SELECT CustomerID,CustomerName,StockItemID as 'ID товара', UnitPrice, InvoiceDate, rank
FROM (
SELECT si.CustomerID,
(SELECT sc.CustomerName FROM Sales.Customers sc WHERE sc.CustomerID = si.CustomerID) as CustomerName,
sil.StockItemID, sil.UnitPrice, si.InvoiceDate,
DENSE_RANK () OVER (PARTITION BY si.CustomerID ORDER BY sil.UnitPrice DESC) as rank --т.к.по несколько покупок, то DENSE_RANK, а не ROW_NUMBER
FROM Sales.Invoices si
LEFT JOIN Sales.InvoiceLines sil ON si.InvoiceID = sil.InvoiceID
)t
WHERE rank in (1,2) ---2 самых дорогих товара

Опционально можете для каждого запроса без оконных функций сделать вариант запросов с оконными функциями и сравнить их производительность. 